<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>mise.marssa</groupId>
	<artifactId>demonstrator-backend</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>bundle</packaging>

	<name>MARSSA Demonstrator Backend OSGi Bundle</name>
	<url>http://www.marsec-xl-projects.org/projects/demonstrator-backend</url>
	<description>This project provides a reference implementation of a typical application running on the MARSSA backend. Applications are the uppermost layer in the Java instance of the MARSSA Reference Architecture. The demonstrator-backend application was developed on top of MARSSA to showcase the demonstrator boat.</description>

	<properties>
		<javaVersion>1.6</javaVersion>
		<marssaVersion>0.0.1-SNAPSHOT</marssaVersion>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<organization>
		<name>MI-SE@MALTA Foundation</name>
		<url>http://www.marsec-xl.org/</url>
	</organization>

	<scm>
		<url>https://github.com/marssa/demonstrator-backend</url>
		<connection>git://github.com/marssa/demonstrator-backend.git</connection>
		<developerConnection>scm:git:git@github.com:marssa/demonstrator-backend.git</developerConnection>
	</scm>

	<developers>
		<developer>
			<email>taboneclayton@gmail.com</email>
			<name>Clayton Tabone</name>
			<url>https://github.com/taboneclayton</url>
			<id>taboneclayton</id>
		</developer>
		<developer>
			<email>warren.zahra@marsec-xl.org</email>
			<name>Warren Zahra</name>
			<url>https://github.com/warrenzahra</url>
			<id>warrenzahra</id>
		</developer>
		<developer>
			<email>amanda.fenech@marsec-xl.org</email>
			<name>Amanda Fenech</name>
			<url>https://github.com/Adnama</url>
			<id>Adnama</id>
		</developer>
		<developer>
			<email>alangrech@gmail.com</email>
			<name>Alan Grech</name>
			<url>https://github.com/alangrech</url>
			<id>alangrech</id>
		</developer>
	</developers>

	<issueManagement>
		<system>Redmine</system>
		<url>http://www.marsec-xl-projects.org/projects/demonstrator-backend</url>
	</issueManagement>

	<!-- This stub section is only needed in older versions of Maven -->
	<distributionManagement>
		<repository>
			<id>repo</id>
			<url>https://raw.github.com/marssa/marssa-mvn-repo/master/releases</url>
		</repository>
		<snapshotRepository>
			<id>snapshot-repo</id>
			<url>https://raw.github.com/marssa/marssa-mvn-repo/master/snapshots</url>
		</snapshotRepository>
	</distributionManagement>

	<repositories>
		<repository>
			<id>marssa-mvn-repo</id>
			<name>MARSSA Repository on github.com</name>
			<url>https://raw.github.com/marssa/marssa-mvn-repo/master/snapshots</url>
		</repository>
	</repositories>

	<dependencies>
		<dependency>
			<groupId>org.apache.felix</groupId>
			<artifactId>org.osgi.core</artifactId>
			<version>1.4.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>mise.marssa</groupId>
			<artifactId>services</artifactId>
			<version>${marssaVersion}</version>
		</dependency>
		<dependency>
			<groupId>commons-daemon</groupId>
			<artifactId>commons-daemon</artifactId>
			<version>1.0.8</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Specify Java compiler version -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>${javaVersion}</source>
					<target>${javaVersion}</target>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-simple</artifactId>
						<version>1.6.4</version>
					</dependency>
				</dependencies>
			</plugin>

			<!-- Bundle artifact as OSGi bundle -->
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>2.3.6</version>
				<extensions>true</extensions>
				<configuration>
					<instructions>
						<Bundle-Activator>mise.marssa.demonstrator.Activator</Bundle-Activator>
						<Embed-Dependency>*;scope=compile|runtime;inline=false;artifactId=!footprint|libraries|services</Embed-Dependency>
					</instructions>
				</configuration>
				<executions>
					<execution>
						<id>install-bundle</id>
						<phase>install</phase>
						<goals>
							<goal>install</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Add target/generated-sources/src/main/java to the build path -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${basedir}/target/generated-sources/src/main/java</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Process external resources -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-remote-resources-plugin</artifactId>
				<version>1.2.1</version>
				<executions>
					<execution>
						<id>process-remote-resources</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>process</goal>
						</goals>
						<configuration>
							<resourceBundles>
								<resourceBundle>mise.marssa:footprint:${marssaVersion}</resourceBundle>
							</resourceBundles>
							<outputDirectory>${basedir}/src/main/resources</outputDirectory>
							<skip>false</skip>
							<includeProjectProperties>true</includeProjectProperties>
							<attached>true</attached>
							<detail>true</detail>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Generate Java classes from xsd file during generate-sources phase -->
			<plugin>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-xjc-plugin</artifactId>
				<version>2.4.0</version>
				<configuration>
					<extensions>
						<extension>org.apache.cxf.xjcplugins:cxf-xjc-dv:2.4.0</extension>
					</extensions>
				</configuration>
				<executions>
					<execution>
						<id>generate-sources</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>xsdtojava</goal>
						</goals>
						<configuration>
							<sourceRoot>${basedir}/target/generated-sources/src/main/java</sourceRoot>
							<xsdOptions>
								<xsdOption>
									<xsd>${basedir}/src/main/resources/schemas/settings.xsd</xsd>
									<packagename>mise.marssa.demonstrator.settings.types</packagename>
								</xsdOption>
							</xsdOptions>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Deploy to alternate repository for github -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<altDeploymentRepository>footprint::default::file:../../git/marssa-mvn-repo/snapshots</altDeploymentRepository>
				</configuration>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.cxf
										</groupId>
										<artifactId>
											cxf-xjc-plugin
										</artifactId>
										<versionRange>
											[2.4.0,)
										</versionRange>
										<goals>
											<goal>xsdtojava</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>build-for-felix</id>
			<dependencies>
				<dependency>
					<groupId>org.apache.felix</groupId>
					<artifactId>org.apache.felix.main</artifactId>
					<version>3.0.7</version>
					<scope>provided</scope>
				</dependency>
				<!-- To include a shell: <dependency> <groupId>org.apache.felix</groupId> 
					<artifactId>org.apache.felix.gogo.shell</artifactId> <version>0.6.1</version> 
					</dependency> -->
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.6</version>
						<executions>
							<execution>
								<id>compile</id>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<pathconvert property="plugins.jars" pathsep="${path.separator}">
											<path refid="maven.runtime.classpath" />
											<map from="${project.build.directory}${file.separator}classes"
												to="" />
										</pathconvert>
										<pathconvert pathsep=" " property="bundles">
											<path path="${plugins.jars}" />
											<mapper>
												<chainedmapper>
													<flattenmapper />
													<globmapper from="*" to="file:modules/*"
														casesensitive="no" />
												</chainedmapper>
											</mapper>
										</pathconvert>
										<propertyfile file="${project.build.directory}/config.properties">
											<entry key="felix.auto.start"
												value="${bundles} file:modules/${project.build.finalName}.jar" />
											<entry key="org.osgi.framework.bootdelegation" value="*" />
										</propertyfile>
										<copy
											file="${maven.dependency.org.apache.felix.org.apache.felix.main.jar.path}"
											tofile="${project.build.directory}/felix.jar" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>2.2</version>
						<executions>
							<execution>
								<id>create-executable-jar</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${basedir}/src/main/assembly/felix.xml</descriptor>
									</descriptors>
									<finalName>${project.build.finalName}</finalName>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>run-on-felix</id>
			<dependencies>
				<dependency>
					<groupId>org.apache.felix</groupId>
					<artifactId>org.apache.felix.main</artifactId>
					<version>3.0.7</version>
					<scope>provided</scope>
				</dependency>
				<!-- org.apache.felix:org.apache.felix.gogo.shell:0.6.1 useless from 
					Maven since stdin is swallowed -->
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.6</version>
						<configuration>
							<target>
								<property name="vm.args" value="" />
								<pathconvert property="plugins.jars" pathsep="${path.separator}">
									<path refid="maven.runtime.classpath" />
									<map from="${project.build.directory}${file.separator}classes"
										to="" />
								</pathconvert>
								<makeurl property="urls" separator=" ">
									<path path="${plugins.jars}" />
									<path
										location="${project.build.directory}/${project.build.finalName}.jar" />
								</makeurl>
								<propertyfile file="${project.build.directory}/run.properties">
									<entry key="felix.auto.start" value="${urls}" />
									<entry key="felix.auto.deploy.action" value="uninstall,install,update,start" />
									<entry key="org.osgi.framework.storage"
										value="${project.build.directory}${file.separator}felix-cache" />
									<entry key="org.osgi.framework.bootdelegation" value="*" />
								</propertyfile>
								<makeurl property="run.properties.url"
									file="${project.build.directory}/run.properties" />
								<java fork="true"
									jar="${maven.dependency.org.apache.felix.org.apache.felix.main.jar.path}">
									<sysproperty key="felix.config.properties" value="${run.properties.url}" />
									<jvmarg line="${vm.args}" />
								</java>
							</target>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
